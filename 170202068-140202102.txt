//Form1.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.VisualBasic;

namespace MatrisinSözdeTersiniBulma
{

    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            label2.Visible = false;
            label3.Visible = false;
            txtSatir.Visible = false;
            txtSütun.Visible = false;
            btnDegerGiris.Visible = false;
            label4.Visible = false;
            label5.Visible = false;
        }

        private void btnOlustur_Click(object sender, EventArgs e)
        {
            if (checkRastgele.Checked == true)
            {
                RastgeleMatrisOlustur();
            }
            else if (checkManuel.Checked == true)
            {
                label2.Visible = true;
                label3.Visible = true;
                txtSatir.Visible = true;
                txtSütun.Visible = true;
                btnDegerGiris.Visible = true;
            }
        }

        private int boyutKontrol()
        {
            if((Convert.ToInt32(txtSatir.Text.ToString()) > 5) )
            {
                errorProvider1.SetError(txtSatir, "1-5 arasinda deðer girmek zorundasiniz");
                return 1;
            }
            else if ((Convert.ToInt32(txtSütun.Text.ToString()) > 5))
            {
                errorProvider1.SetError(txtSütun, "1-5 arasinda deðer girmek zorundasiniz");
                return 1;
            }
            return 0;
        }

        private void btnDegerGiris_Click(object sender, EventArgs e)
        {
            int satir = 0;
            int sutun = 0;

            satir = Convert.ToInt32(txtSatir.Text.ToString());
            sutun = Convert.ToInt32(txtSütun.Text.ToString());

            int kontrol = boyutKontrol();

            if(kontrol == 0)
            {
                double[,] deger = new double[satir, sutun];

                for (int i = 0; i < satir; i++)
                {
                    for (int j = 0; j < sutun; j++)
                    {
                        deger[i, j] = Convert.ToDouble(Microsoft.VisualBasic.Interaction.InputBox(i + "," + j + ".eleman", "Matris Deðer Giriþi", "Buraya yazýnýz...", 300, 300));
                    }
                }
                ManuelMatrisOlustur(deger, satir, sutun);
            }
        }

        public async void RastgeleMatrisOlustur()
        {
            label4.Visible = true;
            label5.Visible = true;
            Random rastgele = new Random();
            int satir = rastgele.Next(1, 5);
            int sutun = rastgele.Next(1, 5);
            double[,] rastgeleMatris = new double[satir, sutun];

            for (int i = 0; i < satir; i++)
            {
                for (int j = 0; j < sutun; j++)
                {
                    int sayi = rastgele.Next(1, 9);
                    Button buton = new Button();
                    buton.Height = 50;
                    buton.Width = 50;
                    buton.Location = new System.Drawing.Point(100 + j * buton.Height + 5, 100 + i * buton.Width + 5);
                    buton.Name = "btn-" + i + "-" + j.ToString();
                    buton.Text = sayi.ToString();
                    //buton.Click += new System.EventHandler(this.boyutButtonClick);
                    this.Controls.Add(buton);
                    rastgeleMatris[i, j] = Convert.ToDouble(buton.Text.ToString());
                }
            }

            if (satir == sutun)
            {
                Metotlar metot = new Metotlar(this);
                double[,] birimmatris = metot.BirimMatris(rastgeleMatris.GetLength(0));
                double[,] tersmatriskare = await metot.tersBulma(rastgeleMatris, birimmatris);
                lblToplamSayisi.Text = Metotlar.Toplamsayisi.ToString();
                lblCarpimSayisi.Text = Metotlar.CarpmaSayisi.ToString();
                //tersMatrisYazdir(tersmatriskare);
            }
            else
            {
                Metotlar metot = new Metotlar(this);
                double[,] transpoz = metot.transpozAl(rastgeleMatris);
                double[,] carpimMatrisi = metot.matrisCarp(rastgeleMatris, transpoz);
                double[,] birimmatris = metot.BirimMatris(carpimMatrisi.GetLength(0));
                double[,] tersmatris = await metot.tersBulma(carpimMatrisi, birimmatris);
                lblToplamSayisi.Text = Metotlar.Toplamsayisi.ToString();
                lblCarpimSayisi.Text = Metotlar.CarpmaSayisi.ToString();
                //tersMatrisYazdir(tersmatris);
            }
        }

        public async void ManuelMatrisOlustur(double[,] sayi, int satir, int sutun)
        {
            label4.Visible = true;
            label5.Visible = true;
            double[,] manuelMatris = new double[satir, sutun];
            for (int i = 0; i < satir; i++)
            {
                for (int j = 0; j < sutun; j++)
                {
                    Button buton = new Button();
                    buton.Height = 50;
                    buton.Width = 50;
                    buton.Location = new System.Drawing.Point(100 + j * buton.Height + 5, 100 + i * buton.Width + 5);
                    buton.Text = sayi[i, j].ToString();
                    this.Controls.Add(buton);
                    manuelMatris[i, j] = Convert.ToDouble(buton.Text.ToString());
                }
            }
            if (satir == sutun)
            {
                Metotlar metot = new Metotlar(this);
                double[,] birimmatris = metot.BirimMatris(manuelMatris.GetLength(0));
                double[,] tersmatriskare = await metot.tersBulma(manuelMatris, birimmatris);
                lblToplamSayisi.Text = Metotlar.Toplamsayisi.ToString();
                lblCarpimSayisi.Text = Metotlar.CarpmaSayisi.ToString();
                //tersMatrisYazdir(tersmatriskare);
            }
            else
            {
                Metotlar metot = new Metotlar(this);
                double[,] transpoz = metot.transpozAl(manuelMatris);
                double[,] carpimMatrisi = metot.matrisCarp(manuelMatris, transpoz);
                double[,] birimmatris = metot.BirimMatris(carpimMatrisi.GetLength(0));
                double[,] tersmatris = await metot.tersBulma(carpimMatrisi, birimmatris);
                lblToplamSayisi.Text = Metotlar.Toplamsayisi.ToString();
                lblCarpimSayisi.Text = Metotlar.CarpmaSayisi.ToString();
                //tersMatrisYazdir(tersmatris);
            }
        }
    }
}


//Metotlar.cs
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MatrisinSözdeTersiniBulma
{
    class Metotlar : Form1
    {
        public static int Toplamsayisi = 0;
        public static int CarpmaSayisi = 0;
        public static Form1 MainForm { get; private set; } = null;

        public Metotlar(Form1 mainForm)
        {
            MainForm = mainForm;
        }

        public double[,] transpozAl(double[,] matris)
        {
            //matris.GetLength(0) -> satir sayisini, matris.GetLength(1) -> sutun sayisini verir.
            //matrisin boyutu axb ise transpozesinin bxa olur. 
            double[,] matrisT = new double[matris.GetLength(1), matris.GetLength(0)];

            for (int i = 0; i < matris.GetLength(0); i++)
            {
                for (int j = 0; j < matris.GetLength(1); j++)
                {
                    matrisT[j, i] = matris[i, j];
                }
            }
            return matrisT;
        }

        public double[,] matrisCarp(double[,] matris, double[,] transpozMatris)
        {
            //Çarpma Ýþlemini Yapýyoruz.
            double[,] sonucMatrisi = new double[transpozMatris.GetLength(0), transpozMatris.GetLength(0)];

            for (int i = 0; i < transpozMatris.GetLength(0); i++)
            {
                for (int k = 0; k < transpozMatris.GetLength(0); k++)
                {
                    for (int j = 0; j < transpozMatris.GetLength(1); j++)
                    {
                        sonucMatrisi[i, k] += transpozMatris[i, j] * matris[j, k];
                    }
                }
            }
            return sonucMatrisi;
        }

        public double[,] BirimMatris(int boyut)
        {
            //Birim matris oluþtururken sadece boyut deðeri olarak satir veya sutundan birini almam yeterli olacak
            //zaten birim matrisin satir ve sutun degeri eþit olur. 
            double[,] birimMatris = new double[boyut, boyut];

            for (int i = 0; i < boyut; i++)
            {
                for (int j = 0; j < boyut; j++)
                {
                    if (i == j)
                        birimMatris[i, j] = 1;
                    else
                        birimMatris[i, j] = 0;
                }
            }
            return birimMatris;
        }

        public async Task<double[,]> tersBulma(double[,] Matris, double[,] birimMatris)
        {
            int bolmeadet = 0, carpimadet = 0, cikarmadet = 0;
            double sayi, sayi1;
            for (int i = 0; i < Matris.GetLength(0); i++)
            {
                sayi = Matris[i, i];
                for (int j = 0; j < Matris.GetLength(1); j++)
                {
                    Matris[i, j] = (Matris[i, j]) / sayi;
                    birimMatris[i, j] = (birimMatris[i, j]) / sayi;
                    bolmeadet = bolmeadet + 1;
                    await tersMatrisYazdir(birimMatris);

                }
                for (int k = 0; k < Matris.GetLength(0); k++)
                {
                    if (k != i)
                    {
                        sayi1 = Matris[k, i];
                        for (int t = 0; t < Matris.GetLength(1); t++)
                        {
                            Matris[k, t] = Matris[k, t] - ((Matris[i, t]) * sayi1);
                            birimMatris[k, t] = birimMatris[k, t] - ((birimMatris[i, t]) * sayi1);
                            carpimadet = carpimadet + 1;
                            cikarmadet = cikarmadet + 1;
                            await tersMatrisYazdir(birimMatris);
                        }
                    }
                }
            }
            islemadetsayisi(cikarmadet, bolmeadet, carpimadet);
            return birimMatris;
        }

        public void islemadetsayisi(int cikarma, int bölme, int carpma)
        {
            Toplamsayisi = cikarma;
            CarpmaSayisi = bölme + carpma;
        }

        public async Task tersMatrisYazdir(double[,] matris)
        {
            var random=new Random();
            for (int i = 0; i < matris.GetLength(0); i++)
            {
                for (int j = 0; j < matris.GetLength(1); j++)
                {
                    var btn = MainForm.Controls.Find("btnResult" + i + j, true).FirstOrDefault();
                    Button button;
                    if (btn != null)
                    {
                        button = (Button)btn;
                    }
                    else
                    {
                        button = new Button
                        {
                            Height = 50,
                            Width = 50,
                            Name = "btnResult" + i + j
                        };
                        button.Location = new System.Drawing.Point(520 + j * button.Height + 5, 100 + i * button.Width + 5);
                    }

                    button.BackColor = Color.FromArgb(random.Next(0,255), random.Next(0, 255), random.Next(0, 255), random.Next(0, 255));
                    button.Text = matris[i, j].ToString("0.###");
                    //buton.Click += new System.EventHandler(this.boyutButtonClick);
                    MainForm.Controls.Add(button);
                    MainForm.Refresh();
                    await Task.Delay(350);
                    MainForm.Refresh();
                }
            }
        }
    }
}
